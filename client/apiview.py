import py_compile
from rest_framework.views import APIView
from rest_framework.response import Response
import requests
# @api_view(['POST'])
# def Tekshir(request):
#     #print(request)

#     return Response({"message": "Hello, world!"})


class Tekshir(APIView):
    """
    View to list all users in the system.

    * Requires token authentication.
    * Only admin users are able to access this view.
    """
    

    def get(self, request):
        """
        Return a list of all users.
        """
        from suds.client import Client
        import json
        from suds.sudsobject import asdict
        url = 'http://127.0.0.1:9090/dsvs/pkcs7/v1?wsdl'
        client = Client(url)
        list_of_methods = [method for method in client.wsdl.services[0].ports[0].methods]

        #print(list_of_methods)
        response = client.service.verifyPkcs7(pkcs7B64="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")

        
        from zeep import Client

        client = Client(url)
        result = client.service.verifyPkcs7(
            pkcs7B64="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")
        #print(result)
        # result jsonga ogriladi
        y=json.loads(result)
        ab=y['pkcs7Info']['signers'][0]['signerId']['subjectSerialNumber']

        #parol uchun bu:
        #kalitning serial raqami :y=json.loads(result)---->>>>y['pkcs7Info']['signers'][0]['certificate'][0]['serialNumber']
        #kalit foydalanuvchi nomi y['pkcs7Info']['signers'][0]['certificate'][0]['subjectName']
        #True bolish kere pasdigila
        #verified Rost bolish kere y['pkcs7Info']['signers'][0]['verified']
        #verified Sertifkat verifikatsiyasi y['pkcs7Info']['signers'][0]['certificateVerified']
        #verified Sigin qilingan vaqti =y['pkcs7Info']['signers'][0]['certificateValidAtSigningTime']
        #toliq yaxwi iwlawi  y['success'] 
        
        y1=y['success']
        print(type(y1))
        print(y['success']) 
        return Response({"mes2":y,"mes3":y1})
    def post(self,request):
        print(request.data)

        return Response({"message": "Hello, world!"})